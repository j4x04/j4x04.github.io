{"version":3,"sources":["api/weatherApi.js","actions/sampleAction.js","actions/types.js","components/Agestatement.js","reducers/SampleReducer.js","RootContext.js","altpages/pageA.js","altpages/pageB.js","pageC.js","router.js","App.js","serviceWorker.js","index.js","store/configureStore.jsx"],"names":["axios","get","then","response","data","weather","description","catch","err","Error","message","sampleAction","dispatch","weatherApi","res","type","sampleState","console","log","Agestatement","props","class","age","defaultProps","sampleReducer","state","action","RootContext","React","createContext","PageA","Provider","Consumer","useState","count","plusOne","useEffect","document","title","onClick","PageB","Component","ageString","App","getQuote","q","qstr","quote","author","setState","error","onWeatherClicked","weatherStr","main","onWeatherClickedRedux","Date","temp","getMonth","getFullYear","agecalculations","this","counterVal","className","href","rel","connect","error404","location","pathname","Router","to","exact","path","component","setName","name","prevState","Boolean","window","hostname","match","store","redux","thunk","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3cf3afe.chunk.js","sourcesContent":["\nimport axios from 'axios';\n\n\nexport default {\n\n\n\n\n\n    getWeather: () => {\n        return axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=0750754af31f0eb78cfa44d9a031f4e1')\n        .then( response => response.data.weather[0].description)\n        .catch(function (err) {\n          throw new Error(err.message)\n        })\n      },\n}\n \n","import { SAMPLE_ACTION_TYPE } from './types'\nimport weatherApi from '../api/weatherApi';\n\n\n\nexport const weatherUpdate = (payload) => {\n    return {\n        type: SAMPLE_ACTION_TYPE,\n        sampleState: payload\n    }\n}\n\n\n\n\nexport const sampleAction = () => (dispatch) => {\n    weatherApi\n      .getWeather()\n      .then((res) => {\n        dispatch(weatherUpdate(res));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    console.log('sampleaction.js called');\n};","export const SAMPLE_ACTION_TYPE = 'sample_action_type';\n","\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\n\n\nfunction Agestatement(props) {\n    return <p class = \"top\">{props.age} years old</p>;\n  }\n\nexport default Agestatement;\n\n\nAgestatement.propTypes = {\n    age: PropTypes.string\n};\n\nAgestatement.defaultProps = {\n    age: 16\n};\n","import { SAMPLE_ACTION_TYPE } from '../actions/types'\n\n\n\nexport const sampleReducer = (state=2, action) => {\n    switch (action.type) {\n        case SAMPLE_ACTION_TYPE:\n            console.log('action processed by reducer, changing state');\n            return {\n                sampleState: action.sampleState\n            };\n        default:\n            return state;\n    }\n} ","import React from 'react';\n\nconst RootContext = React.createContext();\n\n\nexport const RootProvider = RootContext.Provider;\nexport const RootConsumer = RootContext.Consumer;\n\n\nexport default RootContext;\n\n\n\n","import React, {useState, useEffect, useContext} from 'react';\nimport '../App.css';\nimport RootContext from '../RootContext'\n\n\n\nconst PageA = (props) => {\n    const [count, plusOne] = useState(0);\n    useEffect(() => {\n        document.title = `${count}`;\n    });\n\n    return (\n        <div>\n            {count}\n            <div onClick = {()=> plusOne(count + 1)}>Add 1</div>\n        </div>\n    )\n}\n \n\nexport default PageA;\n","import React, {useState, useEffect, useContext} from 'react';\nimport '../App.css';\nimport RootContext from '../RootContext'\nimport UserContext from '../App'\n\n\nclass PageB extends React.Component {\n    \n    //const [name, setName] = useState(\"a\");\n\nrender() {\n    \n\n    return (\n        <div>Page B!</div>\n    );\n}\n} \n\n\nexport default PageB;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport { sampleAction } from './actions/sampleAction'\nimport Agestatement from './components/Agestatement.js';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport weatherApi from \"./api/weatherApi\"\nimport { sampleReducer } from './reducers/SampleReducer.js'\nimport Router from './router'\n\n\n// AGE AUTO UPDATE\nlet counter = 0; \nlet ageString = \"\";\nfunction agecalculations() {\n  let q = new Date(); // new date object\n  var temp = 0;\n  //console.log(q.getMonth());\n  if(q.getMonth() < 5) { // if month is before june (1st) (birthday), subtract age by 1\n    temp = 1;\n  } \n  ageString = q.getFullYear() - 2004 - temp; // age declaration\n}\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      weather: null,\n      quote: null,\n    }\n  }\n\n\n\n\n\n \n\n  componentWillMount() {\n    console.log(\"will mount!!\");\n    agecalculations();\n  }\n  /*\n  componentDidMount() {\n    this.Q = setInterval( () => this.update(), 1000);\n  }*/\n  componentWillReceiveProps() {\n    console.log(\"props!!\");\n  }\n\n  componentWillUpdate() {\n    console.log(\"will update!!!\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"updated!!\");\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngetQuote = () => {\n  const q = this;\n  axios.get('http://quotes.stormconsultancy.co.uk/random.json')\n  .then(function (response) {\n    // handle success\n    //console.log(response);\n    const qstr = `${response.data.quote} - ${response.data.author}`;\n    q.setState({quote: qstr});\n\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n}\n\n\n\n\nonWeatherClicked = () => {\n  const q = this;\n  axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=0750754af31f0eb78cfa44d9a031f4e1')\n  .then(function (response) {\n    // handle success\n    //console.log(response);\n    const weatherStr = `${response.data.weather[0].main} - ${response.data.weather[0].description}`;\n    q.setState({weather: weatherStr});\n\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n}\n\n\n\nonWeatherClickedRedux = () => {\n  this.props.sampleAction();\n}\n\n\n\n\n\n\n\n\n/*\n  update() {\n    counter += 1;\n    this.setState({Q: counter});\n  }\n  */\n\n\n\n\n  /*\n    navbar, replaced by router\n\n    <nav class=\"nav\">\n          <ul>\n            <a href=\"https://google.com\">Home</a>\n            <a href=\"https://facebook.com/\">About</a>\n            <a href=\"#\">Link 2</a>\n          </ul>\n    </nav>\n\n  */\n\n  render() {\n    const {weather, quote} = this.state;\n    const { sampleState } = this.props.counterVal;\n    return ( \n      <div className=\"App\">\n        \n\n\n<header>\n\n\n\n\n\n\n\n  </header>\n\n        <link href=\"https://fonts.googleapis.com/css2?family=Blinker&display=swap\" rel=\"stylesheet\"></link>\n      \n        <div class = \"title\">\n          <h1>Leo Zhang</h1>\n          \n          <div class = \"description\">\n            <Agestatement age = {ageString}/>\n            <p>Attending Upper Canada College</p>\n            <p class = \"bottom\">Toronto, Canada</p>\n          </div>\n        </div>\n        \n\n      <div class = \"rows\">\n        <div class = \"links\">\n          <a href = \"https://github.com/j4x04/webDevelopmentClass-2020\">Github</a>\n          <a href = \"https://google.com\">Instagram</a>\n          <a href = \"https://google.com\">Facebook</a>\n        </div>\n\n\n        <div class = \"bio\">\n          <p>Hello! I am Leo Zhang, currently a high school student who is attending Upper Canada College in Toronto, Ontario.\n            i am interested in taking Computer science and engineering in University, and explore any similar fields. \n            My experience in computer science consists of some python, (web development including HTML and CSS), and  \n            Java from the AP Computer Science A course. </p>\n        </div>\n        </div>\n\n      <br></br>\n      \n      \n\n      <div class = \"apistuff\">\n        <div>Weather in toronto is: {sampleState}</div>\n        <div onClick ={() => this.onWeatherClickedRedux()}>click to get weather :) </div>\n\n      <br></br>\n\n      <div>Your random quote is: {quote}</div>\n      <div onClick ={() => this.getQuote()}>click to get quote :p </div>\n\n\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = ({ sampleReducer }) => ({\n  counterVal: sampleReducer\n});\nexport default connect(mapStateToProps, {sampleAction})(App);\n\n\n/*\nFEEDBACK\n- too many empty lines\n- variable naming appropriate\n- spacing standards (put space before/after operator)\n- airbnb standard eslint, prettier automatically formats\n- indentation\n- className vs class (react)\n*/","import React from 'react';\n\nimport {Route, Link, Switch} from 'react-router-dom';\nimport PageA from './altpages/pageA';\nimport PageB from './altpages/pageB';\nimport PageC from './pageC';\n\n\nconst error404 = ({ location }) => (\n    <h3>Error 404: Page not Found for <code>{location.pathname}</code></h3>\n)\n\n\nclass Router extends React.Component {\n    constructor() {\n        super();\n    }\n\n\n\nrender () {\n\n    return (\n    <div>\n        <div class = \"nav\">\n        <ul>\n            <li>\n                <Link to = \"/pageA\">Page A</Link>\n                <Link to = \"/pageB\">Page B</Link>\n                <Link to = \"/pageC\">Page C</Link>\n            </li>\n        </ul>\n        <hr />\n        <Switch>\n            <Route exact path = \"/\">\n                <PageA />\n            </Route>\n            <Route path = \"/pageA\">\n                <PageA />\n            </Route>\n            <Route path = \"/pageB\">\n                <PageB />\n            </Route>\n            <Route path = \"/pageC\">\n                <PageC />\n            </Route>            \n            <Route component={error404} />\n        </Switch>\n        </div>\n    </div>\n    )\n    };\n}\n\nexport default Router;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport { sampleAction } from './actions/sampleAction'\nimport Agestatement from './components/Agestatement.js';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport weatherApi from \"./api/weatherApi\"\nimport { sampleReducer } from './reducers/SampleReducer.js'\nimport Router from './router'\nimport {RootProvider}from './RootContext';\n\n\n// AGE AUTO UPDATE, move to component soon\nlet counter = 0; \nlet ageString = \"\";\nfunction agecalculations() {\n  let q = new Date(); // new date object\n  var temp = 0;\n  //console.log(q.getMonth());\n  if(q.getMonth() < 5) { // if month is before june (1st) (birthday), subtract age by 1\n    temp = 1;\n  } \n  ageString = q.getFullYear() - 2004 - temp; // age declaration\n}\n\n\n\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      weather: null,\n      quote: null,\n      name: []\n    }\n  }\n\n\n\n\n\n \n\n  componentWillMount() {\n    console.log(\"will mount!!\");\n    agecalculations();\n  }\n  /*\n  componentDidMount() {\n    this.Q = setInterval( () => this.update(), 1000);\n  }*/\n  componentWillReceiveProps() {\n    console.log(\"props!!\");\n  }\n\n  componentWillUpdate() {\n    console.log(\"will update!!!\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"updated!!\");\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngetQuote = () => {\n  const q = this;\n  axios.get('http://quotes.stormconsultancy.co.uk/random.json')\n  .then(function (response) {\n    // handle success\n    //console.log(response);\n    const qstr = `${response.data.quote} - ${response.data.author}`;\n    q.setState({quote: qstr});\n\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n}\n\n\n\n\nonWeatherClicked = () => {\n  const q = this;\n  axios.get('https://api.openweathermap.org/data/2.5/weather?q=toronto&appid=0750754af31f0eb78cfa44d9a031f4e1')\n  .then(function (response) {\n    // handle success\n    //console.log(response);\n    const weatherStr = `${response.data.weather[0].main} - ${response.data.weather[0].description}`;\n    q.setState({weather: weatherStr});\n\n  })\n  .catch(function (error) {\n    // handle error\n    console.log(error);\n  })\n}\n\n\n\nonWeatherClickedRedux = () => {\n  this.props.sampleAction();\n}\n\n\n\n\n\n\n\n\n/*\n  update() {\n    counter += 1;\n    this.setState({Q: counter});\n  }\n  */\n\n\n\n\n  /*\n    navbar, replaced by router\n\n    <nav class=\"nav\">\n          <ul>\n            <a href=\"https://google.com\">Home</a>\n            <a href=\"https://facebook.com/\">About</a>\n            <a href=\"#\">Link 2</a>\n          </ul>\n    </nav>\n\n  */\n\n\nsetName = (name) => {\n  this.setState((prevState) => ({name}))\n}\n\n\n\n  render() {\n    const {weather, quote} = this.state;\n    const { sampleState } = this.props.counterVal;\n\n\n\n    const {name} = this.state;\n    const {setName} = this;\n\n    return ( \n      <div className=\"App\">\n        \n\n        \n        \n\n        <link href=\"https://fonts.googleapis.com/css2?family=Blinker&display=swap\" rel=\"stylesheet\"></link>\n      \n        <div class = \"title\">\n          <h1>Leo Zhang</h1>\n          \n          <div class = \"description\">\n            <Agestatement age = {ageString}/>\n            <p>Attending Upper Canada College</p>\n            <p class = \"bottom\">Toronto, Canada</p>\n          </div>\n        </div>\n        \n\n      <div class = \"rows\">\n        <div class = \"links\">\n          <a href = \"https://github.com/j4x04/webDevelopmentClass-2020\">Github</a>\n          <a href = \"https://google.com\">Instagram</a>\n          <a href = \"https://google.com\">Facebook</a>\n        </div>\n\n\n        <div class = \"bio\">\n          <p>Hello! I am Leo Zhang, currently a high school student who is attending Upper Canada College in Toronto, Ontario.\n            i am interested in taking Computer science and engineering in University, and explore any similar fields. \n            My experience in computer science consists of some python, (web development including HTML and CSS), and  \n            Java from the AP Computer Science A course. </p>\n        </div>\n        </div>\n\n      <br></br>\n      \n      \n\n      <div class = \"apistuff\">\n        <div>Weather in toronto is: {sampleState}</div>\n        <div onClick ={() => this.onWeatherClickedRedux()}>click to get weather :) </div>\n\n      <br></br>\n\n      <div>Your random quote is: {quote}</div>\n      <div onClick ={() => this.getQuote()}>click to get quote :p </div>\n\n      <Router/>\n\n\n\n      </div>\n\n\n\n\n\n\n\n\n\n      \n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = ({ sampleReducer }) => ({\n  counterVal: sampleReducer\n});\nexport default connect(mapStateToProps, {sampleAction})(App);\n\n\n/*\nFEEDBACK\n- too many empty lines\n- variable naming appropriate\n- spacing standards (put space before/after operator)\n- airbnb standard eslint, prettier automatically formats\n- indentation\n- className vs class (react)\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport * as configureStore from './store/configureStore.jsx';\nimport {HashRouter} from 'react-router-dom';\n\nconst store = configureStore.configure();\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import * as redux from 'redux';\nimport {sampleReducer} from '../reducers/SampleReducer';\nimport thunk from 'redux-thunk';\n\nexport const configure = () => {\n    const reducer = () => redux.combineReducers({\n        sampleReducer: sampleReducer,\n    });\n\n    const store = redux.createStore(reducer(), redux.applyMiddleware(thunk));\n    return store;\n}"],"sourceRoot":""}